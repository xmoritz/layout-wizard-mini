{"version":3,"sources":["wizard.png","components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LayoutCard","props","variation","className","colors","onClick","tagline","ColorMix","Tagline","Taglines","setTaglineStatus","ColorMixes","setColorsStatus","Layouts","setLayoutStatus","Menu","setMenuStatus","Result","layoutVariation","colorsVariation","taglineVariation","App","useState","layoutStatus","colorsStatus","taglineStatus","menuStatus","src","wizardLogo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.abd5de1b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wizard.9b30e612.png\";","import React from 'react';\nimport { useState } from 'react';\n\nexport const LayoutCard = (props) => {\n  if (props.variation === 1) {\n    return (\n      <div className={props.colors ? \"LayoutCard LayoutCard--1 LayoutCard--color-\" + props.colors : \"LayoutCard LayoutCard--1\"} onClick={props.onClick}>\n        <div className=\"LayoutCard-header\">{props.tagline ? props.tagline : 'Tagline'}</div>\n        <div className=\"LayoutCard-body\"></div>\n        <div className=\"LayoutCard-footer\"></div>\n      </div>\n    )\n  } else if (props.variation === 2) {\n    return (\n      <div className={props.colors ? \"LayoutCard LayoutCard--2 LayoutCard--color-\" + props.colors : \"LayoutCard LayoutCard--2\"} onClick={props.onClick}>\n        <div className=\"LayoutCard-header\"></div>\n        <div className=\"LayoutCard-body\">{props.tagline ? props.tagline : 'Tagline'}</div>\n        <div className=\"LayoutCard-footer\"></div>\n      </div>\n    )\n  } else if (props.variation === 3) {\n    return (\n      <div className={props.colors ? \"LayoutCard LayoutCard--3 LayoutCard--color-\" + props.colors : \"LayoutCard LayoutCard--3\"} onClick={props.onClick}>\n        <div className=\"LayoutCard-header\"></div>\n        <div className=\"LayoutCard-body\"></div>\n        <div className=\"LayoutCard-footer\">{props.tagline ? props.tagline : 'Tagline'}</div>\n      </div>\n    )\n  } else {\n    return (\n      <div>Choose Layout</div>\n    )\n  }\n}\n\nexport const ColorMix = (props) => {\n  if (props.variation === 1) {\n    return (\n      <div className=\"ColorMix ColorMix--1\" onClick={props.onClick}>\n        <div className=\"ColorMix-top\"></div>\n        <div className=\"ColorMix-mid\"></div>\n        <div className=\"ColorMix-bottom\"></div>\n      </div>\n    )\n  } else if (props.variation === 2) {\n    return (\n      <div className=\"ColorMix ColorMix--2\" onClick={props.onClick}>\n        <div className=\"ColorMix-top\"></div>\n        <div className=\"ColorMix-mid\"></div>\n        <div className=\"ColorMix-bottom\"></div>\n      </div>\n    )\n  } else if (props.variation === 3) {\n    return (\n      <div className=\"ColorMix ColorMix--3\" onClick={props.onClick}>\n        <div className=\"ColorMix-top\"></div>\n        <div className=\"ColorMix-mid\"></div>\n        <div className=\"ColorMix-bottom\"></div>\n      </div>\n    )\n  }\n}\n\nexport const Tagline = (props) => {\n  if (props.variation === 1) {\n    return (\n      <div className=\"Tagline Tagline--1\" onClick={props.onClick}>\n        Hip!\n      </div>\n    )\n  } else if (props.variation === 2) {\n    return (\n      <div className=\"Tagline Tagline--2\" onClick={props.onClick}>\n        So Fresh!\n      </div>\n    )\n  } else if (props.variation === 3) {\n    return (\n      <div className=\"Tagline Tagline--3\" onClick={props.onClick}>\n        Super!\n      </div>\n    )\n  }\n}\n\nexport const Taglines = (props) => {\n  return (\n    <div className=\"Taglines\">\n      Tagline 1:\n      <Tagline variation={1} onClick={() => props.setTaglineStatus('Hip!')} />\n      <br />\n      Tagline 2:\n      <Tagline variation={2} onClick={() => props.setTaglineStatus('So Fresh!')} />\n      <br />\n      Tagline 3:\n      <Tagline variation={3} onClick={() => props.setTaglineStatus('Super!')} />\n    </div>\n  )\n}\n\nexport const ColorMixes = (props) => {\n  return (\n    <div className=\"Colors\">\n      Colors 1:\n      <ColorMix variation={1} onClick={() => props.setColorsStatus(1)} />\n      <br />\n      Colors 2:\n      <ColorMix variation={2} onClick={() => props.setColorsStatus(2)} />\n      <br />\n      Colors 3:\n      <ColorMix variation={3} onClick={() => props.setColorsStatus(3)} />\n    </div>\n  )\n}\n\nexport const Layouts = (props) => {\n  return (\n    <div className=\"Layouts\">\n      Layout 1:\n      <LayoutCard variation={1} onClick={() => props.setLayoutStatus(1)} />\n      <br />\n      Layout 2:\n      <LayoutCard variation={2} onClick={() => props.setLayoutStatus(2)} />\n      <br />\n      Layout 3:\n      <LayoutCard variation={3} onClick={() => props.setLayoutStatus(3)} />\n    </div>\n  )\n}\n\nexport const Menu = (props) => {\n\n  return (\n    <div className=\"Menu\">\n      <div className=\"Menu-item\" onClick={() => props.setMenuStatus('layout')}>Layout</div>\n      <div className=\"Menu-divider\"></div>\n      <div className=\"Menu-item\" onClick={() => props.setMenuStatus('colors')}>Colors</div>\n      <div className=\"Menu-divider\"></div>\n      <div className=\"Menu-item\" onClick={() => props.setMenuStatus('tagline')}>Tagline</div>\n    </div>\n  )\n}\n\nexport const Result = (props) => {\n  return (\n    <div className=\"Result\">\n      <LayoutCard variation={props.layoutVariation} colors={props.colorsVariation} tagline={props.taglineVariation} />\n    </div>\n  )\n}\n\n// export default LayoutCard;","import React from 'react';\nimport { useState } from 'react';\nimport wizardLogo from './wizard.png';\nimport './App.scss';\nimport './components.scss';\n\n// import {LayoutCard} from './components.js'\nimport {ColorMixes} from './components.js'\nimport {Layouts} from './components.js'\nimport {Menu} from './components.js'\nimport {Taglines} from './components.js'\nimport {Result} from './components.js'\n\nfunction App() {\n  const [layoutStatus, setLayoutStatus] = useState(\"no layout chosen\")\n  const [colorsStatus, setColorsStatus] = useState(\"no colors chosen\")\n  const [taglineStatus, setTaglineStatus] = useState(\"no tagline chosen\")\n  const [menuStatus, setMenuStatus] = useState('layout')\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={wizardLogo} className=\"App-logo\" alt=\"logo\" />\n        <div\n          className=\"App-title\"\n        >\n          LAYOUT WIZARD MINI\n        </div>\n      </header>\n      <div className=\"App-status\">CURRENT STATUS - Layout: <span className=\"App-status-layout\">{layoutStatus}</span> Colors: <span className=\"App-status-colors\">{colorsStatus}</span> Tagline: <span className=\"App-status-tagline\">{taglineStatus}</span></div>\n      <main className=\"App-main\">\n       <div className=\"App-container\">\n          <div className=\"App-menu\">\n            MENU:<br /><br /><br />\n            <Menu setMenuStatus={setMenuStatus} />\n          </div>\n          <div className=\"App-options\">OPTIONS:<br /><br />\n            { menuStatus === 'layout' ? <Layouts setLayoutStatus={setLayoutStatus} />\n            : menuStatus === 'colors' ? <ColorMixes setColorsStatus={setColorsStatus} />\n            : menuStatus === 'tagline' ? <Taglines setTaglineStatus={setTaglineStatus} />\n            : <Layouts setLayoutStatus={setLayoutStatus} />}\n            {/* <Layouts setLayoutStatus={setLayoutStatus} />\n            <br /><br />\n            <ColorMixes setColorsStatus={setColorsStatus} />\n            <br /><br />\n            <Taglines setTaglineStatus={setTaglineStatus} /> */}\n          </div>\n          <div className=\"App-result\">RESULT:<br /><br /><br />\n            <Result layoutVariation={layoutStatus} colorsVariation={colorsStatus} taglineVariation={taglineStatus} />\n          </div>\n       </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}